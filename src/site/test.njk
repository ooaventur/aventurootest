---
layout: layouts/base.njk
permalink: test.html
title: AventurOO Test Page
description: Explore how AventurOO renders automated stories directly from the posts feed.
---

<section class="category">
		  <div class="container">
		    <div class="row">

				
		      <div class="col-md-8 text-left">
		        <div class="row">
		          <div class="col-md-12">        
		            <ol class="breadcrumb">
		              <li><a href="#">Home</a></li>
		              <li class="active">Computer</li>
		            </ol>
		            <h3 class="page-title">Category: Computer</h3>
		            <p class="page-subtitle">Showing all posts with category <i>Computer</i></p>
		          </div>
		        </div>
		        <div class="line"></div>
		        <div class="row">
					
					<div id="post-list" class="row"></div>

                          <div class="col-md-12 text-center">
                            <ul id="pagination" class="pagination"></ul>
                            <div id="pagination-info" class="pagination-help-text"></div>
                          </div>
					
		        </div>
		      </div>
		      </div>

<section class="page test-page">
  <div class="container">
    <div class="row">
      <div class="col-md-10 col-md-offset-1">
        <ol class="breadcrumb">
          <li><a href="{{ '/' | url }}">Home</a></li>
          <li class="active">Test Page</li>
        </ol>
        <h1 class="page-title">Automated Feed Test</h1>
        <p class="page-subtitle">
          This page verifies that the JSON feed powering AventurOO can be fetched on demand and rendered into cards
          without a full page refresh. Use it as a sandbox for validating new data sources or debugging layout updates.
        </p>
        <div class="line thin"></div>
        <div class="page-description">
          <p>
            The cards below are populated entirely from
            <code>data/posts.json</code>. The loader falls back across relative and absolute paths so it keeps working
            in local previews as well as production builds.
          </p>
          <p class="text-muted" data-test-feed-status>Loading postsâ€¦</p>
          <div class="row latest-news-grid" data-test-feed></div>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  (function () {
    var POSTS_SOURCES = ['/data/posts.json', 'data/posts.json'];

    var basePath = window.AventurOOBasePath || {
      resolve: function (value) { return value; },
      articleUrl: function (slug) {
        return slug ? '/article.html?slug=' + encodeURIComponent(slug) : '#';
      },
      categoryUrl: function (slug) {
        return slug ? '/category.html?cat=' + encodeURIComponent(slug) : '#';
      }
    };

    function ready(fn) {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', fn);
      } else {
        fn();
      }
    }

    function escapeHtml(value) {
      return (value == null ? '' : String(value)).replace(/[&<>"']/g, function (character) {
        return {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;'
        }[character];
      });
    }

    function slugify(value) {
      return (value || '')
        .toString()
        .trim()
        .toLowerCase()
        .replace(/\.html?$/i, '')
        .replace(/&/g, 'and')
        .replace(/[_\W]+/g, '-')
        .replace(/^-+|-+$/g, '');
    }

    function formatDate(dateValue) {
      if (!dateValue) return '';
      var parsed = new Date(dateValue);
      if (!isNaN(parsed.getTime())) {
        var months = [
          'January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'
        ];
        return months[parsed.getMonth()] + ' ' + parsed.getDate() + ', ' + parsed.getFullYear();
      }
      var fallback = Date.parse(dateValue);
      if (!isNaN(fallback)) {
        return new Date(fallback).toDateString();
      }
      return String(dateValue);
    }

    function articleUrl(post) {
      if (!post) return '#';
      if (post.url) {
        return basePath.resolve ? basePath.resolve(post.url) : post.url;
      }
      var slug = slugify(post.slug || post.title || '');
      if (!slug) return '#';
      if (typeof basePath.articleUrl === 'function') {
        return basePath.articleUrl(slug);
      }
      return '/article.html?slug=' + encodeURIComponent(slug);
    }

    function categoryUrl(category) {
      var slug = slugify(category);
      if (!slug) return '#';
      if (typeof basePath.categoryUrl === 'function') {
        return basePath.categoryUrl(slug);
      }
      return '/category.html?cat=' + encodeURIComponent(slug);
    }

    function resolveCover(post) {
      if (!post || !post.cover) {
        return basePath.resolve ? basePath.resolve('/images/logo.png') : '/images/logo.png';
      }
      return basePath.resolve ? basePath.resolve(post.cover) : post.cover;
    }

    function createCard(post) {
      if (!post || !(post.slug || post.title)) {
        return null;
      }
      var column = document.createElement('div');
      column.className = 'col-sm-6 col-lg-4 latest-news-col test-feed-col';
      var title = escapeHtml(post.title || 'Untitled');
      var excerpt = post.excerpt ? escapeHtml(String(post.excerpt).trim()) : '';
      var category = post.category ? escapeHtml(post.category) : '';
      var categoryLink = category ? escapeHtml(categoryUrl(post.category)) : '#';
      var date = post.date ? escapeHtml(formatDate(post.date)) : '';
      var cover = escapeHtml(resolveCover(post));
      var articleLink = escapeHtml(articleUrl(post));
      var figureClass = post.cover ? '' : ' class="no-cover"';
      column.innerHTML = '' +
        '<article class="article article-mini latest-news-item test-feed-item">' +
          '<div class="inner">' +
            '<figure' + figureClass + '>' +
              '<a href="' + articleLink + '">' +
                '<img src="' + cover + '" alt="' + title + '">' +
              '</a>' +
            '</figure>' +
            '<div class="padding">' +
              '<div class="detail">' +
                (date ? '<div class="time">' + date + '</div>' : '') +
                (category ? '<div class="category"><a href="' + categoryLink + '">' + category + '</a></div>' : '') +
              '</div>' +
              '<h2><a href="' + articleLink + '">' + title + '</a></h2>' +
              (excerpt ? '<p>' + excerpt + '</p>' : '') +
            '</div>' +
          '</div>' +
        '</article>';
      return column;
    }

    function renderPosts(posts) {
      var container = document.querySelector('[data-test-feed]');
      var status = document.querySelector('[data-test-feed-status]');
      if (!container) {
        return;
      }

      container.innerHTML = '';
      var list = Array.isArray(posts) ? posts.slice(0, 12) : [];
      if (!list.length) {
        if (status) {
          status.textContent = 'No posts were returned from the feed.';
          status.classList.remove('text-muted');
        }
        return;
      }

      list.forEach(function (post) {
        var card = createCard(post);
        if (card) {
          container.appendChild(card);
        }
      });

      if (status) {
        status.parentNode.removeChild(status);
      }
    }

    function showError(message) {
      var status = document.querySelector('[data-test-feed-status]');
      if (!status) return;
      status.textContent = message || 'Unable to load posts from the feed.';
      status.classList.remove('text-muted');
    }

    function loadPosts() {
      if (!window.AventurOODataLoader || typeof window.AventurOODataLoader.fetchSequential !== 'function') {
        throw new Error('Data loader is not available');
      }
      return window.AventurOODataLoader.fetchSequential(POSTS_SOURCES);
    }

    ready(function () {
      try {
        loadPosts()
          .then(function (json) {
            renderPosts(json);
          })
          .catch(function (error) {
            console.error(error);
            showError('Unable to load posts from the feed.');
          });
      } catch (error) {
        console.error(error);
        showError('Unable to initialise the feed loader.');
      }
    });
  })();
</script>
