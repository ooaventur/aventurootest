/*!
 * Magnific Popup (custom build for AventurOO)
 * Provides minimal functionality for iframe and image popups with gallery support.
 */
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('jquery'));
  } else {
    factory(window.jQuery || window.Zepto);
  }
}(function ($) {
  'use strict';

  if (!$) {
    return;
  }

  var instances = [];

  function Magnific($el, options) {
    this.$el = $el;
    this.uid = 'mfp' + Math.random().toString(16).slice(2);
    this.opts = $.extend(true, {}, $.magnificPopup.defaults, options);
    this.type = this.opts.type || 'image';
    this.galleryEnabled = !!(this.opts.gallery && this.opts.gallery.enabled);
    this.items = [];
    this.activeIndex = 0;
    this._isBound = false;
    this.$bg = null;
    this.$wrap = null;
    this.$container = null;
    this.$content = null;
    this.$preloader = null;
    this.$arrowLeft = null;
    this.$arrowRight = null;
    this.init();
  }

  Magnific.prototype.init = function () {
    var self = this;

    if (this.galleryEnabled) {
      this.refreshGalleryItems();
    }

    var handler = function (evt) {
      evt.preventDefault();
      var $trigger = $(this);

      if (self.galleryEnabled) {
        self.refreshGalleryItems();
        var idx = self.resolveIndex($trigger);
        self.activeIndex = idx;
        self.openByIndex(idx);
      } else {
        self.openItem(self.buildItem($trigger));
      }
    };

    if (this.opts.delegate) {
      this.$el.on('click.' + this.uid, this.opts.delegate, handler);
    } else {
      this.$el.on('click.' + this.uid, handler);
    }

    this.$el.data('mfpInstance', this);
    instances.push(this);
  };

  Magnific.prototype.update = function (options) {
    this.opts = $.extend(true, {}, this.opts, options);
    this.type = this.opts.type || 'image';
    this.galleryEnabled = !!(this.opts.gallery && this.opts.gallery.enabled);

    if (this.galleryEnabled) {
      this.refreshGalleryItems();
    }
  };

  Magnific.prototype.destroy = function () {
    if (this.opts.delegate) {
      this.$el.off('click.' + this.uid, this.opts.delegate);
    } else {
      this.$el.off('click.' + this.uid);
    }

    this.$el.removeData('mfpInstance');

    if (this.$wrap) {
      this.$wrap.remove();
    }

    if (this.$bg) {
      this.$bg.remove();
    }

    this.unbindEvents();
  };

  Magnific.prototype.resolveIndex = function ($trigger) {
    var idx = parseInt($trigger.attr('data-mfp-index'), 10);

    if (isNaN(idx)) {
      for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].$el[0] === $trigger[0]) {
          idx = i;
          break;
        }
      }
    }

    if (isNaN(idx)) {
      idx = 0;
    }

    return idx;
  };

  Magnific.prototype.refreshGalleryItems = function () {
    var self = this;
    var $items = this.opts.delegate ? this.$el.find(this.opts.delegate) : this.$el;

    if (!$items.length) {
      $items = this.$el;
    }

    this.items = [];

    $items.each(function (i) {
      var $item = $(this);
      $item.attr('data-mfp-index', i);
      self.items.push(self.buildItem($item));
    });
  };

  Magnific.prototype.buildItem = function ($trigger) {
    return {
      $el: $trigger,
      src: $trigger.data('mfp-src') || $trigger.attr('href') || '',
      type: $trigger.data('mfp-type') || this.type || 'image'
    };
  };

  Magnific.prototype.ensureOverlay = function () {
    var self = this;

    if (this.$bg) {
      return;
    }

    this.$bg = $('<div class="mfp-bg"></div>').hide().appendTo(document.body);
    this.$wrap = $('<div class="mfp-wrap" tabindex="-1"></div>').hide().appendTo(document.body);
    this.$container = $('<div class="mfp-container"></div>').appendTo(this.$wrap);
    this.$content = $('<div class="mfp-content"></div>').appendTo(this.$container);
    this.$preloader = $('<div class="mfp-preloader">Loading...</div>').appendTo(this.$container);

    this.$bg.on('click.' + this.uid, function () {
      self.close();
    });

    this.$wrap.on('click.' + this.uid, function (evt) {
      if ($(evt.target).is(self.$wrap)) {
        self.close();
      }
    });
  };

  Magnific.prototype.ensureArrows = function () {
    var self = this;

    if (this.$arrowLeft && this.$arrowRight) {
      return;
    }

    this.$arrowLeft = $('<button type="button" class="mfp-arrow mfp-arrow-left" title="Previous (Left arrow)"></button>')
      .appendTo(this.$wrap)
      .on('click.' + this.uid, function (evt) {
        evt.preventDefault();
        self.prev();
      });

    this.$arrowRight = $('<button type="button" class="mfp-arrow mfp-arrow-right" title="Next (Right arrow)"></button>')
      .appendTo(this.$wrap)
      .on('click.' + this.uid, function (evt) {
        evt.preventDefault();
        self.next();
      });
  };

  Magnific.prototype.updateArrows = function () {
    if (this.galleryEnabled && this.items.length > 1) {
      this.ensureArrows();
      this.$arrowLeft.show();
      this.$arrowRight.show();
    } else {
      if (this.$arrowLeft) {
        this.$arrowLeft.hide();
      }

      if (this.$arrowRight) {
        this.$arrowRight.hide();
      }
    }
  };

  Magnific.prototype.openByIndex = function (idx) {
    if (!this.items.length) {
      return;
    }

    if (idx < 0) {
      idx = this.items.length - 1;
    }

    if (idx >= this.items.length) {
      idx = 0;
    }

    this.activeIndex = idx;
    this.openItem(this.items[idx]);
  };

  Magnific.prototype.openItem = function (item) {
    var self = this;
    this.ensureOverlay();

    this.$bg.show().addClass('mfp-ready');
    this.$wrap.show().addClass('mfp-open');

    this.updateArrows();
    this.bindEvents();

    $('body').addClass('mfp-open');

    this.showItem(item, function () {
      self.$wrap.addClass('mfp-s-ready');
    });
  };

  Magnific.prototype.showItem = function (item, onReady) {
    var self = this;

    this.$wrap.removeClass('mfp-s-ready mfp-s-error');

    if (this.opts.preloader || item.type === 'image') {
      this.$wrap.addClass('mfp-loading');
    } else {
      this.$wrap.removeClass('mfp-loading');
    }

    this.renderItem(item, function (success) {
      self.$wrap.removeClass('mfp-loading');

      if (success) {
        self.$wrap.addClass('mfp-s-ready');

        if (onReady) {
          onReady();
        }
      } else {
        self.$wrap.addClass('mfp-s-error');
      }
    });
  };

  Magnific.prototype.renderItem = function (item, done) {
    var self = this;
    var success = true;

    this.$content.empty();
    this.$wrap.removeClass('mfp-iframe-holder mfp-image-holder');

    if (item.type === 'iframe') {
      this.$wrap.addClass('mfp-iframe-holder');
      var $markup = this.buildIframeMarkup(item);
      this.$content.append($markup);
      this.bindCloseButtons(this.$content);

      var $iframe = $markup.find('iframe');

      if ($iframe.length) {
        $iframe
          .on('load.' + this.uid, function () {
            done && done(true);
          })
          .on('error.' + this.uid, function () {
            done && done(false);
          });
      } else {
        done && done(true);
      }
    } else {
      this.$wrap.addClass('mfp-image-holder');

      var $figure = $('<figure class="mfp-figure"></figure>');
      var $close = $('<button type="button" class="mfp-close" title="Close (Esc)"></button>');
      var $img = $('<img class="mfp-img" alt="">');

      $figure.append($close).append($img);
      this.$content.append($figure);
      this.bindCloseButtons($figure);

      $img
        .on('load.' + this.uid, function () {
          done && done(true);
        })
        .on('error.' + this.uid, function () {
          success = false;
          done && done(false);
        });

      if (item.src) {
        $img.attr('src', item.src);
      } else {
        success = false;
        done && done(false);
      }
    }

    if (!item.src) {
      success = false;
    }

    if (!success) {
      done && done(false);
    }
  };

  Magnific.prototype.buildIframeMarkup = function (item) {
    var iframeOpt = this.opts.iframe || {};
    var markup = iframeOpt.markup || '<div class="mfp-iframe-scaler"><button type="button" class="mfp-close" title="Close (Esc)"></button><iframe class="mfp-iframe" frameborder="0" allowfullscreen></iframe></div>';
    var $markup = $(markup);

    this.bindCloseButtons($markup);

    var src = item.src;
    var patterns = iframeOpt.patterns || {};

    $.each(patterns, function (key, pattern) {
      if (pattern.index && src.indexOf(pattern.index) !== -1) {
        var id = src;

        if ($.isFunction(pattern.id)) {
          id = pattern.id.call(pattern, src);
        } else if (typeof pattern.id === 'string') {
          var parts = src.split(pattern.id);
          id = parts[1] ? parts[1].split(/[?&#]/)[0] : parts[0];
        }

        if (pattern.src) {
          src = pattern.src.replace('%id%', id);
        }

        return false;
      }
    });

    var action = (iframeOpt.srcAction || 'iframe_src').split('_');
    var selector = action[0] || 'iframe';
    var attr = action[1] || 'src';
    var $target = $markup.find(selector);

    if (!$target.length && selector === 'iframe') {
      $target = $markup.filter('iframe');
    }

    if (!$target.length) {
      $target = $markup.find('iframe');
    }

    if ($target.length) {
      $target.attr(attr, src);
    }

    return $markup;
  };

  Magnific.prototype.bindCloseButtons = function ($root) {
    var self = this;

    $root.find('.mfp-close')
      .off('click.' + this.uid)
      .on('click.' + this.uid, function (evt) {
        evt.preventDefault();
        self.close();
      });
  };

  Magnific.prototype.bindEvents = function () {
    var self = this;

    if (this._isBound) {
      return;
    }

    this._isBound = true;

    $(document).on('keydown.' + this.uid, function (evt) {
      if (evt.key === 'Escape' || evt.keyCode === 27) {
        self.close();
        return;
      }

      if (!self.galleryEnabled || !self.items.length) {
        return;
      }

      if (evt.key === 'ArrowRight' || evt.keyCode === 39) {
        self.next();
      } else if (evt.key === 'ArrowLeft' || evt.keyCode === 37) {
        self.prev();
      }
    });
  };

  Magnific.prototype.unbindEvents = function () {
    if (!this._isBound) {
      return;
    }

    this._isBound = false;
    $(document).off('keydown.' + this.uid);
  };

  Magnific.prototype.close = function () {
    if (!this.$wrap || !this.$wrap.hasClass('mfp-open')) {
      return;
    }

    this.$wrap.removeClass('mfp-open mfp-loading mfp-s-ready mfp-iframe-holder mfp-image-holder');
    this.$wrap.hide();

    if (this.$bg) {
      this.$bg.removeClass('mfp-ready mfp-removing');
      this.$bg.hide();
    }

    $('body').removeClass('mfp-open');
    this.unbindEvents();
  };

  Magnific.prototype.next = function () {
    if (!this.galleryEnabled || !this.items.length) {
      return;
    }

    var nextIndex = (this.activeIndex + 1) % this.items.length;
    this.activeIndex = nextIndex;
    this.showItem(this.items[nextIndex]);
  };

  Magnific.prototype.prev = function () {
    if (!this.galleryEnabled || !this.items.length) {
      return;
    }

    var prevIndex = this.activeIndex - 1;

    if (prevIndex < 0) {
      prevIndex = this.items.length - 1;
    }

    this.activeIndex = prevIndex;
    this.showItem(this.items[prevIndex]);
  };

  $.magnificPopup = {
    defaults: {
      type: 'image',
      delegate: null,
      gallery: {
        enabled: false
      },
      preloader: false,
      iframe: {
        markup: '<div class="mfp-iframe-scaler"><button type="button" class="mfp-close" title="Close (Esc)"></button><iframe class="mfp-iframe" frameborder="0" allowfullscreen></iframe></div>',
        patterns: {},
        srcAction: 'iframe_src'
      }
    },
    close: function () {
      if (instances.length) {
        var inst = instances[instances.length - 1];
        if (inst) {
          inst.close();
        }
      }
    },
    open: function (data) {
      if (!data || !data.items) {
        return;
      }

      var $temp = $('<div></div>');
      var opts = data || {};

      if ($.isArray(opts.items)) {
        opts.gallery = opts.gallery || { enabled: opts.items.length > 1 };

        for (var i = 0; i < opts.items.length; i++) {
          var item = opts.items[i];
          var $a = $('<a></a>').attr('href', item.src || '');

          if (item.type) {
            $a.attr('data-mfp-type', item.type);
          }

          if (item.src) {
            $a.attr('data-mfp-src', item.src);
          }

          if (opts.delegate) {
            $a.attr('data-mfp-index', i);
          }

          $temp.append($a);
        }

        var instance = new Magnific($temp, opts);
        instance.openByIndex(opts.index || 0);
      }
    },
    instance: null
  };

  $.fn.magnificPopup = function (options) {
    var args = Array.prototype.slice.call(arguments, 1);

    if (typeof options === 'string') {
      var method = options;
      var returnValue = this;

      this.each(function () {
        var instance = $(this).data('mfpInstance');

        if (instance && typeof instance[method] === 'function') {
          var result = instance[method].apply(instance, args);

          if (result !== undefined) {
            returnValue = result;
          }
        }
      });

      return returnValue;
    }

    return this.each(function () {
      var $this = $(this);
      var instance = $this.data('mfpInstance');

      if (instance) {
        instance.update(options);
      } else {
        new Magnific($this, options || {});
      }
    });
  };

  return $.magnificPopup;
}));
